
> (which-ccglab)

"CCGlab, version 7.0.4"
> (mlg "tr")


======================= c o m p i l i n g ===================================

Project name: tr
  Input : (tr.ccg, tr.lisptokens)
  Output: tr.ccg.lisp 
** Check tr.ccg.lisp for THE FIRST ERROR in tr.ccg IF load fails.
======================= l o a d i n g =======================================

Project tr files
-----------------------------------------------------------------------------
  CCG grammar source       : tr.ccg
          token form       : tr.lisptokens
  Compiled/loaded grammar  : tr.ccg.lisp
  Supervision native source: tr.sup
  Supervision text source  : tr.supervision
       *CCG-GRAMMAR*       : 13 entries
   *LEX-RULES-TABLE*       : 0 entries
=============================================================================
T
> (make-supervision "tr")

Project name: tr
  Input : (tr.supervision, tr.suptokens) 
  Output: tr.sup 
Check tr.supervision for errors and retry if load of tr.sup fails.
Supervision file loaded: tr.sup
T
> (update-model "tr" 5 1.0 1.0 :load t)

*Beamp* = NIL  *Beam-exp* = 0.9

======================= l o a d i n g =======================================

Project tr files
-----------------------------------------------------------------------------
  CCG grammar source       : tr.ccg
          token form       : tr.lisptokens
  Compiled/loaded grammar  : tr.ccg.lisp
  Supervision native source: tr.sup
  Supervision text source  : tr.supervision
       *CCG-GRAMMAR*       : 13 entries
   *LEX-RULES-TABLE*       : 0 entries
=============================================================================

Supervision file loaded: tr.sup

Done. use (show-training/save-training) to see/save the results
NIL
> (show-training)
The rule set used in the experiment:


CCGlab, version 7.0.4

To change a switch, use (setf <switchname> <value>)
	      where <value> is T (on) or NIL (off)
	  *f-apply*     T
	  *b-apply*     T
	  *f-comp*      T
	  *b-comp*      T
	  *fx-comp*     T
	  *bx-comp*     T
	  *f-sub*       T
	  *b-sub*       T
	  *fx-sub*      T
	  *bx-sub*      T
          *f-subbar*    NIL
	  *b-subbar*    NIL
	  *fx-subbar*   NIL
	  *bx-subbar*   NIL
	  *f-subcomp*   NIL
	  *b-subcomp*   NIL
	  *fx-subcomp*  NIL
	  *bx-subcomp*  NIL
          *f2-comp*     T
	  *b2-comp*     T
	  *fx2-comp*    T
	  *bx2-comp*    T
	  *f2-sub*      T
	  *b2-sub*      T
	  *fx2-sub*     T
	  *bx2-sub*     T
	  *f2-subcomp*  NIL
	  *f3-comp*     T
	  *b3-comp*     T
	  *fx3-comp*    T
	  *bx3-comp*    T

*BEAMP* : NIL
*LFFLAG* : T
*NF-PARSE* : T
*OOVP* : NIL
*TYPE-RAISED-P* : NIL
*Beamp* = NIL  *Beam-exp* = 0.9

Training parameters: N = 5 alpha0 = 1.0 c = 1.0 n = 5  
Model parameters before and after training
================================================
key   lex             initial  final    diff 
------------------------------------------------
1     COCUK             1.0 -.399581  (-1.39958)
2     COCUK             1.0 2.130614  (1.130614)
3     COCUK             1.0 2.894736  (1.894736)
4     KITABI            1.0 -1.39702  (-2.39702)
5     KITABI            1.0 0.521897  (-.478103)
6     KITABI            1.0 3.533547  (2.533547)
7     KITABI            1.0 3.122157  (2.122157)
8     OKUDU             1.0 3.270034  (2.270034)
9     OKUDU             1.0 1.375642  (.3756421)
10    OKUDU             1.0 .1144567  (-.885543)
11    OKUDU             1.0 -.370586  (-1.37059)
12    OKUDU             1.0 -.515815  (-1.51581)
13    OKUDU             1.0 -.515815  (-1.51581)
================================================
NIL
> (save-training "tr-trained")

NIL
> (lg "tr-trained")

======================= l o a d i n g =======================================

Project tr-trained files
-----------------------------------------------------------------------------
  Compiled/loaded grammar  : tr-trained.ccg.lisp
       *CCG-GRAMMAR*       : 13 entries
   *LEX-RULES-TABLE*       : 0 entries
=============================================================================
T
> (rank '(cocuk kitabi okudu))

T
> (status)


  do (rules) or (onoff) for rules and switches
  ---------------------------
  Any non-standard rule     ? NO
  Currently loaded grammar  : tr-trained.ccg.lisp
 *CCG-GRAMMAR*              : 13 items
 *LEX-RULES-TABLE*          : 0 items
 *CKY-HASHTABLE*            : 26 items
 *CKY-INPUT* for the table  : (COCUK KITABI OKUDU) 
  Most likely LF w/weight   : (40.913795 ((READ BOOK) CHILD)) 
  Its most likely derivation: (3 1 2)
  Sum of weighted counts    : 70.49936 
  Most likely LF's cells    : ((3 1 7) (3 1 5) (3 1 3) (3 1 2)) 
  Number of differing LFs   : 3 
  Most weighted derivation  : (3 1 1) 
  ---------------------------
NIL
> (probs)

Most likely LF for the input: (COCUK KITABI OKUDU)

  ((READ BOOK) CHILD) =
  (READ BOOK CHILD)

Cumulative weight:  40.913795

Most probable derivation for it: (3 1 2)
--------------------------------
LEX  2.13061  (COCUK) := S/(S\NP)
        : (LAM P (P CHILD))
LEX  .521897  (KITABI) := (S\NP)/((S\NP)\NP)
        : (LAM P (P BOOK))
LEX  3.27003  (OKUDU) := (S\NP)\NP
        : (LAM X (LAM Y ((READ X) Y)))
>    3.79193  (KITABI)(OKUDU) := S\NP
        : ((LAM P (P BOOK)) (LAM X (LAM Y ((READ X) Y))))
>     15.637  (COCUK)(KITABI OKUDU) := S
        : ((LAM P (P CHILD)) ((LAM P (P BOOK)) (LAM X (LAM Y ((READ X) Y)))))

Final LF, normal-order evaluated: 

    ((READ BOOK) CHILD) =
    (READ BOOK CHILD)


Most weighted derivation : (3 1 1)
--------------------------
LEX  2.13061  (COCUK) := S/(S\NP)
        : (LAM P (P CHILD))
LEX  3.12216  (KITABI) := S/(S\NP)
        : (LAM P (P (FG BOOK)))
LEX  1.37564  (OKUDU) := (S\NP)\NP
        : (LAM X (LAM Y ((READ Y) X)))
>Bx   4.4978  (KITABI)(OKUDU) := S\NP
        : (LAM X ((LAM P (P (FG BOOK))) ((LAM X (LAM Y ((READ Y) X))) X)))
>    17.7546  (COCUK)(KITABI OKUDU) := S
        : ((LAM P (P CHILD))
           (LAM X ((LAM P (P (FG BOOK))) ((LAM X (LAM Y ((READ Y) X))) X))))

Final LF, normal-order evaluated: 

    ((READ (FG BOOK)) CHILD) =
    (READ (FG BOOK) CHILD)

Try (cky-pprint) to see all the parses, including the features,
    (cky-pprint-probs <cell>) to pretty-print the parse in <cell>.
NIL
> (dribble)
