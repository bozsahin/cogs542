% this is to demonstrate B, S, B^2 and S^2 in ccglab
% -cem bozsahin
% after compiling and loading the grammar, try parses such as the following
% where p is ccglab's parse function. Use (ders) to see the derivations.
%   (p '(gave harry books and sally records))
%   (p '(harry gave and sally showed mary books))
%   (p '(the articles that harry rejected without reading))
%   (p '(the articles that harry rejected without showing mary))
%   (p '(gave without reading))

the d := np/*n : \x.!def x;
articles n := n : !articles;
that rel := (n\^n)/^(s/np): \p\q\x.!and (p x) (q x);
harry n := s/(s\np) : \p.p !harry;
sally n := s/(s\np) : \p.p !sally;
mary n := s/(s\np) : \p.p !mary;
mary n := (vp/np)\((vp/np)/np): \p.p !mary;
mary n := (s/np)\((s/np)/np): \p.p !mary;
rejected v := (s\np)/np : \x1\x2.!reject x1 x2;
without adv := ((s\np)\(s\np))/vp: \p\q\x.!wout (q x) (p x);
reading ger := vp/np: \x1\x2.!read x1 x2;
showing ger := (vp/np/np): \x1\x2\x3.!show x2 x1 x3;

gave v := ((s\np)/np)/np : \x1\x2\x3.!give x1 x2 x3;
gave v := ((s\np)/pp)/np : \x1\x2\x3.!give x2 x1 x3;  % NB. dative shift
showed v := ((s\np)/np)/np : \x1\x2\x3.!show x1 x2 x3;
harry n := ((s\np)/np)\(((s\np)/np)/np) : \p.p !harry;
sally n := ((s\np)/np)\(((s\np)/np)/np) : \p.p !sally;
books n := (s\np)\((s\np)/np) : \p.p !books;
books n := s\(s/np) : \p.p !books;
records n := (s\np)\((s\np)/np) : \p.p !records;

% manually schematising coordination over valencies of p q

and c := (@x\*@x)/*@x: \p\q.!and p q;
and c := (@x\*@x)/*@x: \p\q\x.!and (p x)(q x);
and c := (@x\*@x)/*@x: \p\q\x\y.!and (p x y)(q x y);
